// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef PROTOBUF_INCLUDED_messages_2eproto
#define PROTOBUF_INCLUDED_messages_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto 

namespace protobuf_messages_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_messages_2eproto
class ChatMessage;
class ChatMessageDefaultTypeInternal;
extern ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
class UserMessage;
class UserMessageDefaultTypeInternal;
extern UserMessageDefaultTypeInternal _UserMessage_default_instance_;
namespace google {
namespace protobuf {
template<> ::ChatMessage* Arena::CreateMaybeMessage<::ChatMessage>(Arena*);
template<> ::UserMessage* Arena::CreateMaybeMessage<::UserMessage>(Arena*);
}  // namespace protobuf
}  // namespace google

enum UserMessage_OperatorType {
  UserMessage_OperatorType_LOGIN = 0,
  UserMessage_OperatorType_REGISTER = 1,
  UserMessage_OperatorType_CHECK = 2,
  UserMessage_OperatorType_UserMessage_OperatorType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  UserMessage_OperatorType_UserMessage_OperatorType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool UserMessage_OperatorType_IsValid(int value);
const UserMessage_OperatorType UserMessage_OperatorType_OperatorType_MIN = UserMessage_OperatorType_LOGIN;
const UserMessage_OperatorType UserMessage_OperatorType_OperatorType_MAX = UserMessage_OperatorType_CHECK;
const int UserMessage_OperatorType_OperatorType_ARRAYSIZE = UserMessage_OperatorType_OperatorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* UserMessage_OperatorType_descriptor();
inline const ::std::string& UserMessage_OperatorType_Name(UserMessage_OperatorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    UserMessage_OperatorType_descriptor(), value);
}
inline bool UserMessage_OperatorType_Parse(
    const ::std::string& name, UserMessage_OperatorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserMessage_OperatorType>(
    UserMessage_OperatorType_descriptor(), name, value);
}
enum UserMessage_ReplyResult {
  UserMessage_ReplyResult_SUCCESS = 0,
  UserMessage_ReplyResult_FAILED = 1,
  UserMessage_ReplyResult_UserMessage_ReplyResult_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  UserMessage_ReplyResult_UserMessage_ReplyResult_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool UserMessage_ReplyResult_IsValid(int value);
const UserMessage_ReplyResult UserMessage_ReplyResult_ReplyResult_MIN = UserMessage_ReplyResult_SUCCESS;
const UserMessage_ReplyResult UserMessage_ReplyResult_ReplyResult_MAX = UserMessage_ReplyResult_FAILED;
const int UserMessage_ReplyResult_ReplyResult_ARRAYSIZE = UserMessage_ReplyResult_ReplyResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* UserMessage_ReplyResult_descriptor();
inline const ::std::string& UserMessage_ReplyResult_Name(UserMessage_ReplyResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    UserMessage_ReplyResult_descriptor(), value);
}
inline bool UserMessage_ReplyResult_Parse(
    const ::std::string& name, UserMessage_ReplyResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserMessage_ReplyResult>(
    UserMessage_ReplyResult_descriptor(), name, value);
}
enum ChatMessage_MessageType {
  ChatMessage_MessageType_PERSONAL_SEND = 0,
  ChatMessage_MessageType_GROUP_SEND = 1,
  ChatMessage_MessageType_ChatMessage_MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ChatMessage_MessageType_ChatMessage_MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ChatMessage_MessageType_IsValid(int value);
const ChatMessage_MessageType ChatMessage_MessageType_MessageType_MIN = ChatMessage_MessageType_PERSONAL_SEND;
const ChatMessage_MessageType ChatMessage_MessageType_MessageType_MAX = ChatMessage_MessageType_GROUP_SEND;
const int ChatMessage_MessageType_MessageType_ARRAYSIZE = ChatMessage_MessageType_MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChatMessage_MessageType_descriptor();
inline const ::std::string& ChatMessage_MessageType_Name(ChatMessage_MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChatMessage_MessageType_descriptor(), value);
}
inline bool ChatMessage_MessageType_Parse(
    const ::std::string& name, ChatMessage_MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatMessage_MessageType>(
    ChatMessage_MessageType_descriptor(), name, value);
}
enum ChatMessage_ReplyResult {
  ChatMessage_ReplyResult_SUCCESS = 0,
  ChatMessage_ReplyResult_FAILED = 1,
  ChatMessage_ReplyResult_ChatMessage_ReplyResult_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ChatMessage_ReplyResult_ChatMessage_ReplyResult_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ChatMessage_ReplyResult_IsValid(int value);
const ChatMessage_ReplyResult ChatMessage_ReplyResult_ReplyResult_MIN = ChatMessage_ReplyResult_SUCCESS;
const ChatMessage_ReplyResult ChatMessage_ReplyResult_ReplyResult_MAX = ChatMessage_ReplyResult_FAILED;
const int ChatMessage_ReplyResult_ReplyResult_ARRAYSIZE = ChatMessage_ReplyResult_ReplyResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChatMessage_ReplyResult_descriptor();
inline const ::std::string& ChatMessage_ReplyResult_Name(ChatMessage_ReplyResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChatMessage_ReplyResult_descriptor(), value);
}
inline bool ChatMessage_ReplyResult_Parse(
    const ::std::string& name, ChatMessage_ReplyResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatMessage_ReplyResult>(
    ChatMessage_ReplyResult_descriptor(), name, value);
}
// ===================================================================

class UserMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UserMessage) */ {
 public:
  UserMessage();
  virtual ~UserMessage();

  UserMessage(const UserMessage& from);

  inline UserMessage& operator=(const UserMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserMessage(UserMessage&& from) noexcept
    : UserMessage() {
    *this = ::std::move(from);
  }

  inline UserMessage& operator=(UserMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserMessage* internal_default_instance() {
    return reinterpret_cast<const UserMessage*>(
               &_UserMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(UserMessage* other);
  friend void swap(UserMessage& a, UserMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserMessage* New() const final {
    return CreateMaybeMessage<UserMessage>(NULL);
  }

  UserMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserMessage& from);
  void MergeFrom(const UserMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UserMessage_OperatorType OperatorType;
  static const OperatorType LOGIN =
    UserMessage_OperatorType_LOGIN;
  static const OperatorType REGISTER =
    UserMessage_OperatorType_REGISTER;
  static const OperatorType CHECK =
    UserMessage_OperatorType_CHECK;
  static inline bool OperatorType_IsValid(int value) {
    return UserMessage_OperatorType_IsValid(value);
  }
  static const OperatorType OperatorType_MIN =
    UserMessage_OperatorType_OperatorType_MIN;
  static const OperatorType OperatorType_MAX =
    UserMessage_OperatorType_OperatorType_MAX;
  static const int OperatorType_ARRAYSIZE =
    UserMessage_OperatorType_OperatorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OperatorType_descriptor() {
    return UserMessage_OperatorType_descriptor();
  }
  static inline const ::std::string& OperatorType_Name(OperatorType value) {
    return UserMessage_OperatorType_Name(value);
  }
  static inline bool OperatorType_Parse(const ::std::string& name,
      OperatorType* value) {
    return UserMessage_OperatorType_Parse(name, value);
  }

  typedef UserMessage_ReplyResult ReplyResult;
  static const ReplyResult SUCCESS =
    UserMessage_ReplyResult_SUCCESS;
  static const ReplyResult FAILED =
    UserMessage_ReplyResult_FAILED;
  static inline bool ReplyResult_IsValid(int value) {
    return UserMessage_ReplyResult_IsValid(value);
  }
  static const ReplyResult ReplyResult_MIN =
    UserMessage_ReplyResult_ReplyResult_MIN;
  static const ReplyResult ReplyResult_MAX =
    UserMessage_ReplyResult_ReplyResult_MAX;
  static const int ReplyResult_ARRAYSIZE =
    UserMessage_ReplyResult_ReplyResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ReplyResult_descriptor() {
    return UserMessage_ReplyResult_descriptor();
  }
  static inline const ::std::string& ReplyResult_Name(ReplyResult value) {
    return UserMessage_ReplyResult_Name(value);
  }
  static inline bool ReplyResult_Parse(const ::std::string& name,
      ReplyResult* value) {
    return UserMessage_ReplyResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes user_number = 1;
  void clear_user_number();
  static const int kUserNumberFieldNumber = 1;
  const ::std::string& user_number() const;
  void set_user_number(const ::std::string& value);
  #if LANG_CXX11
  void set_user_number(::std::string&& value);
  #endif
  void set_user_number(const char* value);
  void set_user_number(const void* value, size_t size);
  ::std::string* mutable_user_number();
  ::std::string* release_user_number();
  void set_allocated_user_number(::std::string* user_number);

  // bytes password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const void* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // bytes nickname = 3;
  void clear_nickname();
  static const int kNicknameFieldNumber = 3;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const void* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // bytes signture = 4;
  void clear_signture();
  static const int kSigntureFieldNumber = 4;
  const ::std::string& signture() const;
  void set_signture(const ::std::string& value);
  #if LANG_CXX11
  void set_signture(::std::string&& value);
  #endif
  void set_signture(const char* value);
  void set_signture(const void* value, size_t size);
  ::std::string* mutable_signture();
  ::std::string* release_signture();
  void set_allocated_signture(::std::string* signture);

  // bool is_online = 5;
  void clear_is_online();
  static const int kIsOnlineFieldNumber = 5;
  bool is_online() const;
  void set_is_online(bool value);

  // .UserMessage.OperatorType operator_tpye = 6;
  void clear_operator_tpye();
  static const int kOperatorTpyeFieldNumber = 6;
  ::UserMessage_OperatorType operator_tpye() const;
  void set_operator_tpye(::UserMessage_OperatorType value);

  // .UserMessage.ReplyResult reply_result = 7;
  void clear_reply_result();
  static const int kReplyResultFieldNumber = 7;
  ::UserMessage_ReplyResult reply_result() const;
  void set_reply_result(::UserMessage_ReplyResult value);

  // @@protoc_insertion_point(class_scope:UserMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_number_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr signture_;
  bool is_online_;
  int operator_tpye_;
  int reply_result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChatMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChatMessage) */ {
 public:
  ChatMessage();
  virtual ~ChatMessage();

  ChatMessage(const ChatMessage& from);

  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatMessage(ChatMessage&& from) noexcept
    : ChatMessage() {
    *this = ::std::move(from);
  }

  inline ChatMessage& operator=(ChatMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatMessage* internal_default_instance() {
    return reinterpret_cast<const ChatMessage*>(
               &_ChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ChatMessage* other);
  friend void swap(ChatMessage& a, ChatMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatMessage* New() const final {
    return CreateMaybeMessage<ChatMessage>(NULL);
  }

  ChatMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChatMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChatMessage& from);
  void MergeFrom(const ChatMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ChatMessage_MessageType MessageType;
  static const MessageType PERSONAL_SEND =
    ChatMessage_MessageType_PERSONAL_SEND;
  static const MessageType GROUP_SEND =
    ChatMessage_MessageType_GROUP_SEND;
  static inline bool MessageType_IsValid(int value) {
    return ChatMessage_MessageType_IsValid(value);
  }
  static const MessageType MessageType_MIN =
    ChatMessage_MessageType_MessageType_MIN;
  static const MessageType MessageType_MAX =
    ChatMessage_MessageType_MessageType_MAX;
  static const int MessageType_ARRAYSIZE =
    ChatMessage_MessageType_MessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MessageType_descriptor() {
    return ChatMessage_MessageType_descriptor();
  }
  static inline const ::std::string& MessageType_Name(MessageType value) {
    return ChatMessage_MessageType_Name(value);
  }
  static inline bool MessageType_Parse(const ::std::string& name,
      MessageType* value) {
    return ChatMessage_MessageType_Parse(name, value);
  }

  typedef ChatMessage_ReplyResult ReplyResult;
  static const ReplyResult SUCCESS =
    ChatMessage_ReplyResult_SUCCESS;
  static const ReplyResult FAILED =
    ChatMessage_ReplyResult_FAILED;
  static inline bool ReplyResult_IsValid(int value) {
    return ChatMessage_ReplyResult_IsValid(value);
  }
  static const ReplyResult ReplyResult_MIN =
    ChatMessage_ReplyResult_ReplyResult_MIN;
  static const ReplyResult ReplyResult_MAX =
    ChatMessage_ReplyResult_ReplyResult_MAX;
  static const int ReplyResult_ARRAYSIZE =
    ChatMessage_ReplyResult_ReplyResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ReplyResult_descriptor() {
    return ChatMessage_ReplyResult_descriptor();
  }
  static inline const ::std::string& ReplyResult_Name(ReplyResult value) {
    return ChatMessage_ReplyResult_Name(value);
  }
  static inline bool ReplyResult_Parse(const ::std::string& name,
      ReplyResult* value) {
    return ChatMessage_ReplyResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes from_number = 2;
  void clear_from_number();
  static const int kFromNumberFieldNumber = 2;
  const ::std::string& from_number() const;
  void set_from_number(const ::std::string& value);
  #if LANG_CXX11
  void set_from_number(::std::string&& value);
  #endif
  void set_from_number(const char* value);
  void set_from_number(const void* value, size_t size);
  ::std::string* mutable_from_number();
  ::std::string* release_from_number();
  void set_allocated_from_number(::std::string* from_number);

  // bytes nickname = 3;
  void clear_nickname();
  static const int kNicknameFieldNumber = 3;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const void* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // bytes to_number = 4;
  void clear_to_number();
  static const int kToNumberFieldNumber = 4;
  const ::std::string& to_number() const;
  void set_to_number(const ::std::string& value);
  #if LANG_CXX11
  void set_to_number(::std::string&& value);
  #endif
  void set_to_number(const char* value);
  void set_to_number(const void* value, size_t size);
  ::std::string* mutable_to_number();
  ::std::string* release_to_number();
  void set_allocated_to_number(::std::string* to_number);

  // bytes time = 5;
  void clear_time();
  static const int kTimeFieldNumber = 5;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  #if LANG_CXX11
  void set_time(::std::string&& value);
  #endif
  void set_time(const char* value);
  void set_time(const void* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // bytes data = 6;
  void clear_data();
  static const int kDataFieldNumber = 6;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .ChatMessage.MessageType message_type = 1;
  void clear_message_type();
  static const int kMessageTypeFieldNumber = 1;
  ::ChatMessage_MessageType message_type() const;
  void set_message_type(::ChatMessage_MessageType value);

  // .ChatMessage.ReplyResult reply_result = 7;
  void clear_reply_result();
  static const int kReplyResultFieldNumber = 7;
  ::ChatMessage_ReplyResult reply_result() const;
  void set_reply_result(::ChatMessage_ReplyResult value);

  // @@protoc_insertion_point(class_scope:ChatMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_number_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr to_number_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int message_type_;
  int reply_result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserMessage

// bytes user_number = 1;
inline void UserMessage::clear_user_number() {
  user_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserMessage::user_number() const {
  // @@protoc_insertion_point(field_get:UserMessage.user_number)
  return user_number_.GetNoArena();
}
inline void UserMessage::set_user_number(const ::std::string& value) {
  
  user_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserMessage.user_number)
}
#if LANG_CXX11
inline void UserMessage::set_user_number(::std::string&& value) {
  
  user_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UserMessage.user_number)
}
#endif
inline void UserMessage::set_user_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserMessage.user_number)
}
inline void UserMessage::set_user_number(const void* value, size_t size) {
  
  user_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserMessage.user_number)
}
inline ::std::string* UserMessage::mutable_user_number() {
  
  // @@protoc_insertion_point(field_mutable:UserMessage.user_number)
  return user_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserMessage::release_user_number() {
  // @@protoc_insertion_point(field_release:UserMessage.user_number)
  
  return user_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserMessage::set_allocated_user_number(::std::string* user_number) {
  if (user_number != NULL) {
    
  } else {
    
  }
  user_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_number);
  // @@protoc_insertion_point(field_set_allocated:UserMessage.user_number)
}

// bytes password = 2;
inline void UserMessage::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserMessage::password() const {
  // @@protoc_insertion_point(field_get:UserMessage.password)
  return password_.GetNoArena();
}
inline void UserMessage::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserMessage.password)
}
#if LANG_CXX11
inline void UserMessage::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UserMessage.password)
}
#endif
inline void UserMessage::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserMessage.password)
}
inline void UserMessage::set_password(const void* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserMessage.password)
}
inline ::std::string* UserMessage::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:UserMessage.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserMessage::release_password() {
  // @@protoc_insertion_point(field_release:UserMessage.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserMessage::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:UserMessage.password)
}

// bytes nickname = 3;
inline void UserMessage::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserMessage::nickname() const {
  // @@protoc_insertion_point(field_get:UserMessage.nickname)
  return nickname_.GetNoArena();
}
inline void UserMessage::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserMessage.nickname)
}
#if LANG_CXX11
inline void UserMessage::set_nickname(::std::string&& value) {
  
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UserMessage.nickname)
}
#endif
inline void UserMessage::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserMessage.nickname)
}
inline void UserMessage::set_nickname(const void* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserMessage.nickname)
}
inline ::std::string* UserMessage::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:UserMessage.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserMessage::release_nickname() {
  // @@protoc_insertion_point(field_release:UserMessage.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserMessage::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:UserMessage.nickname)
}

// bytes signture = 4;
inline void UserMessage::clear_signture() {
  signture_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserMessage::signture() const {
  // @@protoc_insertion_point(field_get:UserMessage.signture)
  return signture_.GetNoArena();
}
inline void UserMessage::set_signture(const ::std::string& value) {
  
  signture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserMessage.signture)
}
#if LANG_CXX11
inline void UserMessage::set_signture(::std::string&& value) {
  
  signture_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UserMessage.signture)
}
#endif
inline void UserMessage::set_signture(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserMessage.signture)
}
inline void UserMessage::set_signture(const void* value, size_t size) {
  
  signture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserMessage.signture)
}
inline ::std::string* UserMessage::mutable_signture() {
  
  // @@protoc_insertion_point(field_mutable:UserMessage.signture)
  return signture_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserMessage::release_signture() {
  // @@protoc_insertion_point(field_release:UserMessage.signture)
  
  return signture_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserMessage::set_allocated_signture(::std::string* signture) {
  if (signture != NULL) {
    
  } else {
    
  }
  signture_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signture);
  // @@protoc_insertion_point(field_set_allocated:UserMessage.signture)
}

// bool is_online = 5;
inline void UserMessage::clear_is_online() {
  is_online_ = false;
}
inline bool UserMessage::is_online() const {
  // @@protoc_insertion_point(field_get:UserMessage.is_online)
  return is_online_;
}
inline void UserMessage::set_is_online(bool value) {
  
  is_online_ = value;
  // @@protoc_insertion_point(field_set:UserMessage.is_online)
}

// .UserMessage.OperatorType operator_tpye = 6;
inline void UserMessage::clear_operator_tpye() {
  operator_tpye_ = 0;
}
inline ::UserMessage_OperatorType UserMessage::operator_tpye() const {
  // @@protoc_insertion_point(field_get:UserMessage.operator_tpye)
  return static_cast< ::UserMessage_OperatorType >(operator_tpye_);
}
inline void UserMessage::set_operator_tpye(::UserMessage_OperatorType value) {
  
  operator_tpye_ = value;
  // @@protoc_insertion_point(field_set:UserMessage.operator_tpye)
}

// .UserMessage.ReplyResult reply_result = 7;
inline void UserMessage::clear_reply_result() {
  reply_result_ = 0;
}
inline ::UserMessage_ReplyResult UserMessage::reply_result() const {
  // @@protoc_insertion_point(field_get:UserMessage.reply_result)
  return static_cast< ::UserMessage_ReplyResult >(reply_result_);
}
inline void UserMessage::set_reply_result(::UserMessage_ReplyResult value) {
  
  reply_result_ = value;
  // @@protoc_insertion_point(field_set:UserMessage.reply_result)
}

// -------------------------------------------------------------------

// ChatMessage

// .ChatMessage.MessageType message_type = 1;
inline void ChatMessage::clear_message_type() {
  message_type_ = 0;
}
inline ::ChatMessage_MessageType ChatMessage::message_type() const {
  // @@protoc_insertion_point(field_get:ChatMessage.message_type)
  return static_cast< ::ChatMessage_MessageType >(message_type_);
}
inline void ChatMessage::set_message_type(::ChatMessage_MessageType value) {
  
  message_type_ = value;
  // @@protoc_insertion_point(field_set:ChatMessage.message_type)
}

// bytes from_number = 2;
inline void ChatMessage::clear_from_number() {
  from_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatMessage::from_number() const {
  // @@protoc_insertion_point(field_get:ChatMessage.from_number)
  return from_number_.GetNoArena();
}
inline void ChatMessage::set_from_number(const ::std::string& value) {
  
  from_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatMessage.from_number)
}
#if LANG_CXX11
inline void ChatMessage::set_from_number(::std::string&& value) {
  
  from_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatMessage.from_number)
}
#endif
inline void ChatMessage::set_from_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatMessage.from_number)
}
inline void ChatMessage::set_from_number(const void* value, size_t size) {
  
  from_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatMessage.from_number)
}
inline ::std::string* ChatMessage::mutable_from_number() {
  
  // @@protoc_insertion_point(field_mutable:ChatMessage.from_number)
  return from_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMessage::release_from_number() {
  // @@protoc_insertion_point(field_release:ChatMessage.from_number)
  
  return from_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessage::set_allocated_from_number(::std::string* from_number) {
  if (from_number != NULL) {
    
  } else {
    
  }
  from_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_number);
  // @@protoc_insertion_point(field_set_allocated:ChatMessage.from_number)
}

// bytes nickname = 3;
inline void ChatMessage::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatMessage::nickname() const {
  // @@protoc_insertion_point(field_get:ChatMessage.nickname)
  return nickname_.GetNoArena();
}
inline void ChatMessage::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatMessage.nickname)
}
#if LANG_CXX11
inline void ChatMessage::set_nickname(::std::string&& value) {
  
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatMessage.nickname)
}
#endif
inline void ChatMessage::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatMessage.nickname)
}
inline void ChatMessage::set_nickname(const void* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatMessage.nickname)
}
inline ::std::string* ChatMessage::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:ChatMessage.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMessage::release_nickname() {
  // @@protoc_insertion_point(field_release:ChatMessage.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessage::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:ChatMessage.nickname)
}

// bytes to_number = 4;
inline void ChatMessage::clear_to_number() {
  to_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatMessage::to_number() const {
  // @@protoc_insertion_point(field_get:ChatMessage.to_number)
  return to_number_.GetNoArena();
}
inline void ChatMessage::set_to_number(const ::std::string& value) {
  
  to_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatMessage.to_number)
}
#if LANG_CXX11
inline void ChatMessage::set_to_number(::std::string&& value) {
  
  to_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatMessage.to_number)
}
#endif
inline void ChatMessage::set_to_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatMessage.to_number)
}
inline void ChatMessage::set_to_number(const void* value, size_t size) {
  
  to_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatMessage.to_number)
}
inline ::std::string* ChatMessage::mutable_to_number() {
  
  // @@protoc_insertion_point(field_mutable:ChatMessage.to_number)
  return to_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMessage::release_to_number() {
  // @@protoc_insertion_point(field_release:ChatMessage.to_number)
  
  return to_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessage::set_allocated_to_number(::std::string* to_number) {
  if (to_number != NULL) {
    
  } else {
    
  }
  to_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_number);
  // @@protoc_insertion_point(field_set_allocated:ChatMessage.to_number)
}

// bytes time = 5;
inline void ChatMessage::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatMessage::time() const {
  // @@protoc_insertion_point(field_get:ChatMessage.time)
  return time_.GetNoArena();
}
inline void ChatMessage::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatMessage.time)
}
#if LANG_CXX11
inline void ChatMessage::set_time(::std::string&& value) {
  
  time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatMessage.time)
}
#endif
inline void ChatMessage::set_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatMessage.time)
}
inline void ChatMessage::set_time(const void* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatMessage.time)
}
inline ::std::string* ChatMessage::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:ChatMessage.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMessage::release_time() {
  // @@protoc_insertion_point(field_release:ChatMessage.time)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessage::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:ChatMessage.time)
}

// bytes data = 6;
inline void ChatMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatMessage::data() const {
  // @@protoc_insertion_point(field_get:ChatMessage.data)
  return data_.GetNoArena();
}
inline void ChatMessage::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatMessage.data)
}
#if LANG_CXX11
inline void ChatMessage::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatMessage.data)
}
#endif
inline void ChatMessage::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatMessage.data)
}
inline void ChatMessage::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatMessage.data)
}
inline ::std::string* ChatMessage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:ChatMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMessage::release_data() {
  // @@protoc_insertion_point(field_release:ChatMessage.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ChatMessage.data)
}

// .ChatMessage.ReplyResult reply_result = 7;
inline void ChatMessage::clear_reply_result() {
  reply_result_ = 0;
}
inline ::ChatMessage_ReplyResult ChatMessage::reply_result() const {
  // @@protoc_insertion_point(field_get:ChatMessage.reply_result)
  return static_cast< ::ChatMessage_ReplyResult >(reply_result_);
}
inline void ChatMessage::set_reply_result(::ChatMessage_ReplyResult value) {
  
  reply_result_ = value;
  // @@protoc_insertion_point(field_set:ChatMessage.reply_result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::UserMessage_OperatorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UserMessage_OperatorType>() {
  return ::UserMessage_OperatorType_descriptor();
}
template <> struct is_proto_enum< ::UserMessage_ReplyResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UserMessage_ReplyResult>() {
  return ::UserMessage_ReplyResult_descriptor();
}
template <> struct is_proto_enum< ::ChatMessage_MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ChatMessage_MessageType>() {
  return ::ChatMessage_MessageType_descriptor();
}
template <> struct is_proto_enum< ::ChatMessage_ReplyResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ChatMessage_ReplyResult>() {
  return ::ChatMessage_ReplyResult_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_messages_2eproto
